// <auto-generated />
using System;
using CenterForGeneticResearch.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CenterForGeneticResearch.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CenterForGeneticResearch.Models.Entities.Conclusion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ConclusionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<int?>("number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestId")
                        .IsUnique();

                    b.ToTable("Conclusions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConclusionDate = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Recommendations = "Рекомендована консультация гематолога, контроль коагулограммы 2 раза в год, избегать обезвоживания",
                            Summary = "Выявлен высокий риск тромбофилии из-за полиморфизмов в генах F2 и F5",
                            TestId = 1
                        },
                        new
                        {
                            Id = 2,
                            ConclusionDate = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Recommendations = "Стандартный скрининг рака молочной железы согласно возрасту",
                            Summary = "Мутации в генах BRCA1/BRCA2 не обнаружены",
                            TestId = 2
                        },
                        new
                        {
                            Id = 3,
                            ConclusionDate = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Recommendations = "Коррекция дозы клопидогрела, рассмотреть альтернативные антиагреганты",
                            Summary = "Обнаружен генотип CYP2C19*1/*2, указывающий на промежуточный метаболизм",
                            TestId = 3
                        },
                        new
                        {
                            Id = 4,
                            ConclusionDate = new DateTime(2023, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Recommendations = "Плановое наблюдение беременности, УЗИ в 20-22 недели",
                            Summary = "Пренатальный скрининг показал низкий риск хромосомных аномалий",
                            TestId = 4
                        },
                        new
                        {
                            Id = 5,
                            ConclusionDate = new DateTime(2023, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Recommendations = "Выдать юридическое заключение для судебных целей",
                            Summary = "Отцовство подтверждено с вероятностью 99.99%",
                            TestId = 5
                        },
                        new
                        {
                            Id = 6,
                            ConclusionDate = new DateTime(2023, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Recommendations = "Консультация клинического генетика, обследование родственников",
                            Summary = "Выявлены патогенные варианты в генах, связанных с наследственными заболеваниями",
                            TestId = 6
                        },
                        new
                        {
                            Id = 7,
                            ConclusionDate = new DateTime(2023, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Recommendations = "Безлактозная диета, препараты лактазы при необходимости",
                            Summary = "Подтверждена первичная лактазная недостаточность",
                            TestId = 7
                        });
                });

            modelBuilder.Entity("CenterForGeneticResearch.Models.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmployeeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<short>("WorkExperience")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Специалист по молекулярной генетике, эксперт в области наследственных заболеваний",
                            BirthDate = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ivan.petrov@genlab.ru",
                            EmployeeType = "Geneticist",
                            FirstName = "Иван",
                            HireDate = new DateTime(2015, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Петров",
                            MiddleName = "Сергеевич",
                            Phone = "79161234567",
                            WorkExperience = (short)10
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Врач-генетик, специализация - превентивная медицина",
                            BirthDate = new DateTime(1990, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elena.smirnova@genlab.ru",
                            EmployeeType = "Doctor",
                            FirstName = "Елена",
                            HireDate = new DateTime(2018, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Смирнова",
                            MiddleName = "Александровна",
                            Phone = "79269876543",
                            WorkExperience = (short)7
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Медсестра процедурного кабинета, забор биоматериалов",
                            BirthDate = new DateTime(1992, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "anna.kozlova@genlab.ru",
                            EmployeeType = "Nurse",
                            FirstName = "Анна",
                            HireDate = new DateTime(2019, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Козлова",
                            MiddleName = "Михайловна",
                            Phone = "79031234578",
                            WorkExperience = (short)6
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Подготовка проб, проведение ПЦР-анализов",
                            BirthDate = new DateTime(1993, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dmitry.volkov@genlab.ru",
                            EmployeeType = "LabTechnician",
                            FirstName = "Дмитрий",
                            HireDate = new DateTime(2020, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Волков",
                            Phone = "79167654321",
                            WorkExperience = (short)5
                        },
                        new
                        {
                            Id = 5,
                            Bio = "Научный сотрудник, исследования в области геномной медицины",
                            BirthDate = new DateTime(1988, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "olga.novikova@genlab.ru",
                            EmployeeType = "Researcher",
                            FirstName = "Ольга",
                            HireDate = new DateTime(2017, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Новикова",
                            MiddleName = "Игоревна",
                            Phone = "79253215476",
                            WorkExperience = (short)8
                        },
                        new
                        {
                            Id = 6,
                            Bio = "Управление лабораторными процессами и координация работы",
                            BirthDate = new DateTime(1980, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sergey.fedorov@genlab.ru",
                            EmployeeType = "Administrator",
                            FirstName = "Сергей",
                            HireDate = new DateTime(2015, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Фёдоров",
                            MiddleName = "Павлович",
                            Phone = "79087654321",
                            WorkExperience = (short)12
                        },
                        new
                        {
                            Id = 7,
                            Bio = "Обслуживание лабораторного оборудования",
                            BirthDate = new DateTime(1991, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alexey.morozov@genlab.ru",
                            EmployeeType = "LabTechnician",
                            FirstName = "Алексей",
                            HireDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Морозов",
                            MiddleName = "Владимирович",
                            Phone = "79104561237",
                            WorkExperience = (short)4
                        });
                });

            modelBuilder.Entity("CenterForGeneticResearch.Models.Entities.Gene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Function")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("RelatedDiseases")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Genes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Function = "Подавление опухолей, репарация ДНК",
                            Name = "BRCA1",
                            RelatedDiseases = "Рак молочной железы, рак яичников"
                        },
                        new
                        {
                            Id = 2,
                            Function = "Регуляция хлоридных каналов",
                            Name = "CFTR",
                            RelatedDiseases = "Муковисцидоз"
                        },
                        new
                        {
                            Id = 3,
                            Function = "Кодирование бета-глобина",
                            Name = "HBB",
                            RelatedDiseases = "Серповидноклеточная анемия, бета-талассемия"
                        },
                        new
                        {
                            Id = 4,
                            Function = "Фактор свертывания крови VIII",
                            Name = "F8",
                            RelatedDiseases = "Гемофилия A"
                        },
                        new
                        {
                            Id = 5,
                            Function = "Кодирование белка хантингтина",
                            Name = "HTT",
                            RelatedDiseases = "Хорея Гентингтона"
                        },
                        new
                        {
                            Id = 6,
                            Function = "Транспорт липидов",
                            Name = "APOE",
                            RelatedDiseases = "Болезнь Альцгеймера, гиперлипопротеинемия"
                        },
                        new
                        {
                            Id = 7,
                            Function = "Фермент глюкозо-6-фосфат-дегидрогеназа",
                            Name = "G6PD",
                            RelatedDiseases = "Дефицит G6PD, гемолитическая анемия"
                        },
                        new
                        {
                            Id = 8,
                            Function = "Протромбин",
                            Name = "F2",
                            RelatedDiseases = "Тромбофилия"
                        },
                        new
                        {
                            Id = 9,
                            Function = "Фактор V",
                            Name = "F5",
                            RelatedDiseases = "Лейденская тромбофилия"
                        },
                        new
                        {
                            Id = 10,
                            Function = "Метилентетрагидрофолатредуктаза",
                            Name = "MTHFR",
                            RelatedDiseases = "Гипергомоцистеинемия"
                        },
                        new
                        {
                            Id = 11,
                            Function = "Подавление опухолей",
                            Name = "BRCA2",
                            RelatedDiseases = "Рак молочной железы"
                        },
                        new
                        {
                            Id = 12,
                            Function = "Метаболизм лекарств",
                            Name = "CYP2C19",
                            RelatedDiseases = "Нарушения метаболизма лекарств"
                        },
                        new
                        {
                            Id = 13,
                            Function = "Трисомия 21",
                            Name = "T21",
                            RelatedDiseases = "Синдром Дауна"
                        },
                        new
                        {
                            Id = 14,
                            Function = "Трисомия 18",
                            Name = "T18",
                            RelatedDiseases = "Синдром Эдвардса"
                        },
                        new
                        {
                            Id = 15,
                            Function = "Лактаза",
                            Name = "LCT",
                            RelatedDiseases = "Непереносимость лактозы"
                        });
                });

            modelBuilder.Entity("CenterForGeneticResearch.Models.Entities.GeneTestRelation", b =>
                {
                    b.Property<int>("GeneId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("GeneId", "TestId");

                    b.HasIndex("TestId");

                    b.ToTable("GeneTestRelations");

                    b.HasData(
                        new
                        {
                            GeneId = 8,
                            TestId = 1
                        },
                        new
                        {
                            GeneId = 9,
                            TestId = 1
                        },
                        new
                        {
                            GeneId = 10,
                            TestId = 1
                        },
                        new
                        {
                            GeneId = 1,
                            TestId = 2
                        },
                        new
                        {
                            GeneId = 11,
                            TestId = 2
                        },
                        new
                        {
                            GeneId = 12,
                            TestId = 3
                        },
                        new
                        {
                            GeneId = 13,
                            TestId = 4
                        },
                        new
                        {
                            GeneId = 14,
                            TestId = 4
                        },
                        new
                        {
                            GeneId = 1,
                            TestId = 6
                        },
                        new
                        {
                            GeneId = 3,
                            TestId = 6
                        },
                        new
                        {
                            GeneId = 6,
                            TestId = 6
                        },
                        new
                        {
                            GeneId = 15,
                            TestId = 7
                        });
                });

            modelBuilder.Entity("CenterForGeneticResearch.Models.Entities.GeneticSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CollectionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("SampleType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("StorageLocation")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TemperatureRegime")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("GeneticSamples");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CollectionDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            SampleType = "Blood",
                            Status = "ReadyForAnalysis",
                            StorageLocation = "Холодильник A1",
                            TemperatureRegime = "-20°C"
                        },
                        new
                        {
                            Id = 2,
                            CollectionDate = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 2,
                            SampleType = "Saliva",
                            Status = "InAnalysis",
                            StorageLocation = "Морозильник B2",
                            TemperatureRegime = "-80°C"
                        },
                        new
                        {
                            Id = 3,
                            CollectionDate = new DateTime(2023, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 3,
                            SampleType = "Biopsy",
                            Status = "AnalysisComplete",
                            StorageLocation = "Холодильник C3",
                            TemperatureRegime = "-196°C"
                        },
                        new
                        {
                            Id = 4,
                            CollectionDate = new DateTime(2023, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 4,
                            SampleType = "Urine",
                            Status = "Archived",
                            StorageLocation = "Морозильник D4",
                            TemperatureRegime = "-20°C"
                        },
                        new
                        {
                            Id = 5,
                            CollectionDate = new DateTime(2023, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 5,
                            SampleType = "Hair",
                            Status = "Registered",
                            StorageLocation = "Шкаф E5",
                            TemperatureRegime = "Комнатная"
                        },
                        new
                        {
                            Id = 6,
                            CollectionDate = new DateTime(2023, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 6,
                            SampleType = "Other",
                            Status = "InProcessing",
                            StorageLocation = "Холодильник F6",
                            TemperatureRegime = "4°C"
                        },
                        new
                        {
                            Id = 7,
                            CollectionDate = new DateTime(2023, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 7,
                            SampleType = "Blood",
                            Status = "Destroyed",
                            StorageLocation = "Морозильник G7",
                            TemperatureRegime = "-80°C"
                        });
                });

            modelBuilder.Entity("CenterForGeneticResearch.Models.Entities.GeneticTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnalysisMethod")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime>("ConductDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Interpretation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("SampleId")
                        .HasColumnType("int");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SampleId");

                    b.ToTable("GeneticTests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnalysisMethod = "NGS-секвенирование",
                            ConductDate = new DateTime(2023, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            Interpretation = "Повышенный риск тромбофилии",
                            Result = "Обнаружены полиморфизмы в генах F2, F5",
                            SampleId = 1,
                            TestName = "Генетический профиль сердечно-сосудистых заболеваний"
                        },
                        new
                        {
                            Id = 2,
                            AnalysisMethod = "ПЦР в реальном времени",
                            ConductDate = new DateTime(2023, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            Interpretation = "Риск наследственного рака молочной железы в пределах популяционной нормы",
                            Result = "Мутация BRCA1 не обнаружена",
                            SampleId = 2,
                            TestName = "Анализ мутаций BRCA1/BRCA2"
                        },
                        new
                        {
                            Id = 3,
                            AnalysisMethod = "Sanger sequencing",
                            ConductDate = new DateTime(2023, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            Interpretation = "Сниженный метаболизм некоторых антиагрегантов",
                            Result = "Генотип CYP2C19*1/*2",
                            SampleId = 3,
                            TestName = "Фармакогенетический тест CYP2C19"
                        },
                        new
                        {
                            Id = 4,
                            AnalysisMethod = "qPCR",
                            ConductDate = new DateTime(2023, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            Interpretation = "Результаты в пределах нормы для срока беременности",
                            Result = "Низкий риск трисомий 21, 18, 13",
                            SampleId = 4,
                            TestName = "Пренатальный скрининг на трисомии"
                        },
                        new
                        {
                            Id = 5,
                            AnalysisMethod = "STR-анализ 16 локусов",
                            ConductDate = new DateTime(2023, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 5,
                            Interpretation = "Биологическое отцовство подтверждено",
                            Result = "99.99% вероятность отцовства",
                            SampleId = 5,
                            TestName = "Тест на отцовство"
                        },
                        new
                        {
                            Id = 6,
                            AnalysisMethod = "WGS",
                            ConductDate = new DateTime(2023, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            Interpretation = "Рекомендована консультация генетика",
                            Result = "Выявлено 4 патогенных варианта в генах",
                            SampleId = 6,
                            TestName = "Полногеномное секвенирование"
                        },
                        new
                        {
                            Id = 7,
                            AnalysisMethod = "RFLP-анализ",
                            ConductDate = new DateTime(2023, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            Interpretation = "Первичная лактазная недостаточность",
                            Result = "Генотип CC(-13910)",
                            SampleId = 7,
                            TestName = "Тест на непереносимость лактозы"
                        });
                });

            modelBuilder.Entity("CenterForGeneticResearch.Models.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Иван",
                            Gender = "Male",
                            LastName = "Петров",
                            MiddleName = "Сергеевич",
                            Phone = "79123456789"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1990, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Елена",
                            Gender = "Female",
                            LastName = "Смирнова",
                            MiddleName = "Александровна",
                            Phone = "79234567890"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1978, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Алексей",
                            Gender = "Male",
                            LastName = "Кузнецов",
                            Phone = "79345678901"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1995, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ольга",
                            Gender = "Female",
                            LastName = "Васильева",
                            MiddleName = "Игоревна",
                            Phone = "79456789012"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(1982, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Дмитрий",
                            Gender = "Male",
                            LastName = "Новиков",
                            MiddleName = "Викторович",
                            Phone = "79567890123"
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateTime(2000, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Анна",
                            Gender = "Female",
                            LastName = "Морозова",
                            MiddleName = "Дмитриевна",
                            Phone = "79678901234"
                        },
                        new
                        {
                            Id = 7,
                            BirthDate = new DateTime(1992, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Максим",
                            Gender = "Other",
                            LastName = "Фёдоров",
                            Phone = "79789012345"
                        });
                });

            modelBuilder.Entity("CenterForGeneticResearch.Models.Entities.Conclusion", b =>
                {
                    b.HasOne("CenterForGeneticResearch.Models.Entities.GeneticTest", "GeneticTest")
                        .WithOne("Conclusion")
                        .HasForeignKey("CenterForGeneticResearch.Models.Entities.Conclusion", "TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneticTest");
                });

            modelBuilder.Entity("CenterForGeneticResearch.Models.Entities.GeneTestRelation", b =>
                {
                    b.HasOne("CenterForGeneticResearch.Models.Entities.Gene", "Gene")
                        .WithMany("TestRelations")
                        .HasForeignKey("GeneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CenterForGeneticResearch.Models.Entities.GeneticTest", "GeneticTest")
                        .WithMany("GeneRelations")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gene");

                    b.Navigation("GeneticTest");
                });

            modelBuilder.Entity("CenterForGeneticResearch.Models.Entities.GeneticSample", b =>
                {
                    b.HasOne("CenterForGeneticResearch.Models.Entities.Patient", "Patient")
                        .WithMany("GeneticSamples")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CenterForGeneticResearch.Models.Entities.GeneticTest", b =>
                {
                    b.HasOne("CenterForGeneticResearch.Models.Entities.Employee", "Employee")
                        .WithMany("GeneticTests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CenterForGeneticResearch.Models.Entities.GeneticSample", "GeneticSample")
                        .WithMany("GeneticTests")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("GeneticSample");
                });

            modelBuilder.Entity("CenterForGeneticResearch.Models.Entities.Employee", b =>
                {
                    b.Navigation("GeneticTests");
                });

            modelBuilder.Entity("CenterForGeneticResearch.Models.Entities.Gene", b =>
                {
                    b.Navigation("TestRelations");
                });

            modelBuilder.Entity("CenterForGeneticResearch.Models.Entities.GeneticSample", b =>
                {
                    b.Navigation("GeneticTests");
                });

            modelBuilder.Entity("CenterForGeneticResearch.Models.Entities.GeneticTest", b =>
                {
                    b.Navigation("Conclusion")
                        .IsRequired();

                    b.Navigation("GeneRelations");
                });

            modelBuilder.Entity("CenterForGeneticResearch.Models.Entities.Patient", b =>
                {
                    b.Navigation("GeneticSamples");
                });
#pragma warning restore 612, 618
        }
    }
}
